// Generated by Dagger (https://dagger.dev).
package com.exploar.movies.di;

import com.exploar.movies.data.mapper.DataModelMapper;
import com.exploar.movies.data.remote.MoviesApi;
import com.exploar.movies.domain.repository.MoviesGenresRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_ProvidesMovieGenreRepositoryFactory implements Factory<MoviesGenresRepository> {
  private final Provider<MoviesApi> apiProvider;

  private final Provider<DataModelMapper> dataModelMapperProvider;

  public RepositoryModule_ProvidesMovieGenreRepositoryFactory(Provider<MoviesApi> apiProvider,
      Provider<DataModelMapper> dataModelMapperProvider) {
    this.apiProvider = apiProvider;
    this.dataModelMapperProvider = dataModelMapperProvider;
  }

  @Override
  public MoviesGenresRepository get() {
    return providesMovieGenreRepository(apiProvider.get(), dataModelMapperProvider.get());
  }

  public static RepositoryModule_ProvidesMovieGenreRepositoryFactory create(
      Provider<MoviesApi> apiProvider, Provider<DataModelMapper> dataModelMapperProvider) {
    return new RepositoryModule_ProvidesMovieGenreRepositoryFactory(apiProvider, dataModelMapperProvider);
  }

  public static MoviesGenresRepository providesMovieGenreRepository(MoviesApi api,
      DataModelMapper dataModelMapper) {
    return Preconditions.checkNotNullFromProvides(RepositoryModule.INSTANCE.providesMovieGenreRepository(api, dataModelMapper));
  }
}
